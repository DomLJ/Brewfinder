{"version":3,"sources":["components/Map.tsx","components/BreweryData.tsx","components/SuggestionTile.tsx","components/Suggestions.tsx","components/Input.tsx","components/Main.tsx","components/Footer.tsx","components/Header.tsx","components/App.tsx","index.js"],"names":["Map","Component","constructor","props","super","this","state","map","marker","componentDidMount","setState","initiateMap","L","zoomControl","setView","position","tileLayer","attribution","addTo","setMarker","control","zoom","setTimeout","invalidateSize","bind","componentDidUpdate","prevProps","chosenBrewery","remove","newMarker","bindPopup","name","latitude","parseInt","longitude","render","className","id","BreweryData","brew","street","city","website_url","href","slice","SuggestionTile","breweryId","onClick","pickBrewery","Suggestions","autocompleteRender","autocompleteResult","item","key","listVisibility","isSuggestionsVisible","Input","inputActive","placeholder","onChange","e","autocomplete","target","value","inputValue","Main","debounceAutocomplete","search","submitAutocomplete","debounce","requestAutocomplete","handleErrors","result","ok","Error","statusText","fetch","then","json","catch","prevState","Footer","Header","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.91f5bc31.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport L, { LatLngExpression } from 'leaflet'\r\nimport { ChosenBrewery } from './Main'\r\n\r\ninterface MapProps {\r\n    chosenBrewery : ChosenBrewery\r\n}\r\n\r\ninterface MapState {\r\n    map: L.Map | null,\r\n    marker: L.Marker | null\r\n}\r\n\r\nclass Map extends Component<MapProps, MapState> {\r\n    constructor(props: MapProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            map: null,\r\n            marker: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            map: this.initiateMap()\r\n        }) \r\n    }\r\n\r\n    initiateMap() {\r\n        const map = L.map('map', { zoomControl: false }).setView(this.position, 12)\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map)\r\n\r\n        this.setMarker(map)\r\n\r\n        L.control.zoom({\r\n            position: 'bottomright'\r\n        }).addTo(map)\r\n\r\n        setTimeout(map.invalidateSize.bind(map))\r\n\r\n        return map\r\n    }\r\n\r\n    componentDidUpdate(prevProps: MapProps) {\r\n        if (this.state.map instanceof L.Map && prevProps.chosenBrewery !== this.props.chosenBrewery) {\r\n            this.state.map.setView(this.position, 12)\r\n            this.setMarker(this.state.map)\r\n        }\r\n    }\r\n\r\n    setMarker(map: L.Map) {\r\n        this.state.marker?.remove()\r\n\r\n        const newMarker = L.marker(this.position)\r\n            .addTo(map)\r\n            .bindPopup(this.name)\r\n\r\n        this.setState({\r\n            marker: newMarker\r\n        })\r\n    }\r\n\r\n    get position(): LatLngExpression {\r\n        return this.props.chosenBrewery.latitude \r\n            ? [parseInt(this.props.chosenBrewery.latitude), parseInt(this.props.chosenBrewery.longitude)]\r\n            : [0, 0]\r\n    }\r\n\r\n    get name(): string {\r\n        return this.props.chosenBrewery.name ?? ''\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='map'>\r\n                <div id='map' className='map__content'></div>\r\n                <div className={`map__curtain ${this.props.chosenBrewery.latitude ? 'invisible' : ' '}`}>\r\n                    <p className='map__explanation'>Sorry, geographical coordinates are unknown</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { ChosenBrewery } from './Main'\r\n\r\ninterface BreweryDataProps {\r\n    chosenBrewery: ChosenBrewery,\r\n    id: number\r\n}\r\n\r\nfunction BreweryData(props: BreweryDataProps) {\r\n    const brew = props.chosenBrewery\r\n\r\n    return (\r\n        <div className='brewery-data'>\r\n            {(brew.name && props.id !== 0)\r\n                ? <p className='brewery-data__paragraph'>\r\n                    {brew.name}\r\n                </p>\r\n                : null\r\n            }\r\n\r\n            {(brew.street && brew.city && brew.state)\r\n                ? <p className='brewery-data__paragraph'>\r\n                    {`${brew.street}, ${brew.city}, ${brew.state}`}\r\n                </p>\r\n                : null\r\n            }\r\n\r\n            {brew.website_url\r\n                ? <a\r\n                    className='brewery-data__link'\r\n                    href={brew.website_url}\r\n                >\r\n                    {brew.website_url.slice(11)}\r\n                </a>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreweryData\r\n","import React from 'react'\r\n\r\ninterface SuggestionTileProps {\r\n    name: string,\r\n    pickBrewery: (id: string) => void,\r\n    breweryId: string\r\n}\r\n\r\nfunction SuggestionTile(props: SuggestionTileProps) {\r\n    return (\r\n        <li className='suggestions__item'>\r\n            <button\r\n                \r\n                className='suggestions__button'\r\n                id={props.breweryId}\r\n                onClick={() => props.pickBrewery(props.breweryId)}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\nexport default SuggestionTile\r\n","import React from 'react'\r\nimport SuggestionTile from './SuggestionTile'\r\nimport { Autocomplete } from './Main'\r\n\r\ninterface SuggestionsProps {\r\n    isSuggestionsVisible: boolean,\r\n    pickBrewery: (id: string) => void,\r\n    autocompleteResult: Autocomplete[],\r\n    autocomplete: (value: string) => void\r\n}\r\n\r\nfunction Suggestions(props: SuggestionsProps) {\r\n    const autocompleteRender = props.autocompleteResult.map(item =>\r\n        <SuggestionTile\r\n            name={item.name}\r\n            key={item.id}\r\n            breweryId={item.id}\r\n            pickBrewery={props.pickBrewery}\r\n        />\r\n    )\r\n    const listVisibility = (props.isSuggestionsVisible) ? '' : 'suggestions--invisible'\r\n\r\n    return (\r\n        <div className={`suggestions ${listVisibility}`}>\r\n            <ul className={`suggestions__list`} >\r\n                {autocompleteRender}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Suggestions\r\n","import React from 'react'\r\n\r\ninterface InputProps {\r\n    autocomplete: (value: string) => void,\r\n    isSuggestionsVisible: boolean,\r\n    inputValue: string\r\n}\r\n\r\nfunction Input(props: InputProps) {\r\n    const inputActive = props.isSuggestionsVisible ? 'input--active' : ''\r\n    return (\r\n        <input\r\n            className={`input ${inputActive}`}\r\n            placeholder='Search Brewery...'\r\n            onChange={e => props.autocomplete(e.target.value)}\r\n            value={props.inputValue}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React, { Component } from 'react'\r\nimport { debounce, Cancelable } from 'lodash'\r\nimport Map from './Map'\r\nimport BreweryData from './BreweryData'\r\nimport Suggestions from './Suggestions'\r\nimport Input from './Input'\r\n\r\nexport interface Autocomplete {\r\n    id: string,\r\n    name: string\r\n}\r\n\r\nexport interface ChosenBrewery {\r\n    name: string,\r\n    latitude: string,\r\n    longitude: string,\r\n    street?: string,\r\n    city?: string,\r\n    state?: string,\r\n    website_url?: string\r\n}\r\n\r\ninterface MainState {\r\n    autocompleteResult: Autocomplete[],\r\n    search: string,\r\n    key: number,\r\n    chosenBrewery: ChosenBrewery,\r\n    isSuggestionsVisible: boolean\r\n}\r\n\r\nclass Main extends Component<{}, MainState> {\r\n    debounceAutocomplete: (() => void) & Cancelable\r\n\r\n    constructor(props: {}) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            autocompleteResult: [],\r\n            search: '',\r\n            key: 0,\r\n            chosenBrewery: {\r\n                name: 'New York City',\r\n                latitude: '40.730610',\r\n                longitude: '-73.935242'\r\n            },\r\n            isSuggestionsVisible: false\r\n        }\r\n        this.submitAutocomplete = this.submitAutocomplete.bind(this)\r\n        this.pickBrewery = this.pickBrewery.bind(this)\r\n        this.debounceAutocomplete = debounce(this.requestAutocomplete, 1500)\r\n    }\r\n\r\n    handleErrors(result: any) {\r\n        if (!result.ok) {\r\n            throw Error(result.statusText)\r\n        }\r\n        return result\r\n    }\r\n\r\n    submitAutocomplete(value: string) {\r\n        if (value) {\r\n            this.setState({\r\n                search: value,\r\n                isSuggestionsVisible: true\r\n            }, this.debounceAutocomplete)\r\n        } else {\r\n            this.setState({\r\n                search: '',\r\n                isSuggestionsVisible: false\r\n            })\r\n        }\r\n    }\r\n\r\n    requestAutocomplete() {\r\n        fetch(`https://api.openbrewerydb.org/breweries/autocomplete?query=${this.state.search}`)\r\n            .then(this.handleErrors)\r\n            .then(result => result.json())\r\n            .then(result => this.setState({ autocompleteResult: result }))\r\n            .catch(() => new Error())    \r\n    }\r\n\r\n    pickBrewery(id: string) {\r\n        fetch(`https://api.openbrewerydb.org/breweries/${id}`)\r\n            .then(result => result.json())\r\n            .then(result => this.setState(prevState => ({\r\n                chosenBrewery: result,\r\n                key: prevState.key + 1,\r\n                search: result.name,\r\n                isSuggestionsVisible: false,\r\n                autocompleteResult: []\r\n            })\r\n            ))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main className='main'>\r\n                <Input\r\n                    autocomplete={this.submitAutocomplete}\r\n                    inputValue={this.state.search}\r\n                    isSuggestionsVisible={this.state.isSuggestionsVisible}\r\n                />\r\n                <Suggestions\r\n                    autocomplete={this.submitAutocomplete}\r\n                    autocompleteResult={this.state.autocompleteResult}\r\n                    pickBrewery={this.pickBrewery}\r\n                    isSuggestionsVisible={this.state.isSuggestionsVisible}\r\n                />\r\n                <BreweryData\r\n                    chosenBrewery={this.state.chosenBrewery}\r\n                    id={this.state.key}\r\n                />\r\n                <Map\r\n                    chosenBrewery={this.state.chosenBrewery}\r\n                />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className='footer'>\r\n            <div className='footer__container'>\r\n                <div className='footer__content'>\r\n                    Powered by:\r\n                    <a\r\n                        className='footer__link'\r\n                        href='https://www.openbrewerydb.org'\r\n                    >\r\n                        Open Brewery DB\r\n                    </a>\r\n                </div>\r\n                <div className='footer__content'>Created by: Dominik Józefiak</div>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className='header'>\r\n            <h1 className='header__title'>Brewfinder</h1>\r\n            <a  \r\n                className='header__link'\r\n                href='https://github.com/DomLJ/Brewfinder'\r\n            >\r\n                <i className='header__icon fab fa-github'></i>\r\n            </a>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport Main from './Main'\r\nimport Footer from './Footer'\r\nimport Header from './Header'\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <Main />\r\n            <Footer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './style.scss'\r\nimport App from './components/App.tsx'\r\nimport 'remove-focus-outline'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}